import { BaseContext } from '../component/baseContext';
import { IMessagePayload } from '../message';
export interface IEntityMap {
    [name: string]: any;
}
export interface ICompositeBagItem {
    name: string;
    type: string;
    entityName?: string;
}
export interface IEntityResolutionStatus {
    name?: string;
    resolvingField?: string;
    validationErrors?: {
        [name: string]: string | Error;
    };
    skippedItems?: string[];
    updatedEntities?: ICompositeBagItem[];
    outOfOrderMatches?: ICompositeBagItem[];
    allMatches?: ICompositeBagItem[];
    disambiguationValues: {
        [name: string]: any[];
    };
    userInput?: string;
    customProperties: {
        [name: string]: any;
    };
    shouldPromptCache: any;
}
export interface ISystemEntityDisplayProperty {
    properties: string[];
    function?: (...args: string[]) => string;
}
/**
 * The Bots EntityResolutionContext is a class for querying, validating and changing a composite bag entity and its
 * entity resolution status.
 * </p>
 * An EntityResolutionContext class instance is passed as an argument to every event handler function.
 * @memberof module:Lib
 */
export declare class EntityResolutionContext extends BaseContext {
    private readonly _entityStatus;
    private _entity;
    private _systemEntityDisplayProperties;
    /**
     * Constructor of entity resolution context.
     * DO NOT USE - INSTANCE IS ALREADY PASSED TO EVENT HANDLERS
     * @param {object} request
     */
    constructor(request: any);
    /**
     * Returns the value of the composite bag entity currently being resolved
     * @return {object} The JSON object holding the composite bag item values
     */
    getEntity(): IEntityMap;
    /**
     * Sets the value of the composite bag entity currently being resolved
     * @param {object} newEntity - The JSON object holding the composite bag item values
     */
    setEntity(newEntity: IEntityMap): void;
    /**
     * Returns the name of the composite bag entity type currently being resolved
     * @return {string} name of the composite bag entity type
     */
    getEntityName(): string;
    /**
     * Returns list of composite bag item definitions
     * @return {object[]} list of composite bag item definitions
     */
    getEntityItems(): ICompositeBagItem[];
    /**
     * Return value of a composite bag item in the composite bag entity currentyly being resolved
     * @return {object} value of the composite bag item
     * @param {string} name - the name of the composite bag item for which the value is returned
     */
    getItemValue(name: string): any;
    /**
     * Set value of a composite bag item in the composite bag entity currentyly being resolved
     * @param {string} name - the name of the composite bag item for which the value is set
     * @param {object} value - value of the composite bag item
     */
    setItemValue(name: string, value: ICompositeBagItem): void;
    /**
     * Remove the value of a composite bag item from the composite bag entity JSON object
     * @param {string} name - name of the composite bag item
     */
    clearItemValue(name: string): void;
    /**
     * Add a validation error for a composite bag item. This marks the item invalid and the
     * the item will not be set/updated with the new invalid value. The error mesage will be
     * published as bot message to the user.
     * @param {string} itemName - name of composite bag iten that validation error applies to
     * @param {string} error - the error message
     */
    addValidationError(itemName: string, error: string): void;
    /**
     * Returns validation errors
     * @return {object} validation errors keyed by item name
     */
    getValidationErrors(): {
        [name: string]: string | Error;
    };
    /**
     * Returns the disambiguation values that are found based on the last user input for a specific bag item
     * @return {object[]} the disambiguations values. This is a string array for bag items that have a custom
     * entity type, and a JSONObject array for bag items with a system entity type
     * @param {string} itemName - name of the composite bag item
     */
    getDisambiguationValues(itemName: string): any[];
    /**
     * Removes the disambiguation values that are found based on the last user input for a specific bag item
     * @param {string} itemName - name of the composite bag item, if not specified, all disambiguation values
     * of all items will be cleared
     */
    clearDisambiguationValues(itemName: string): void;
    /**
     * Returns the name of the bag item that is currently being resolved
     * @return {string} the bag item name
     */
    getCurrentItem(): string;
    /**
     * Returns the last user input message. If the last message was not a text message, this function returns undefined
     * @return {string} the user text message
     */
    getUserInput(): string;
    /**
     * Mark a composite bag item as skipped, which means the ResolveEntities or CommonResponse component
     * will no longer prompt for a value for the bag item
     * @param {string} name - name of the composite bag item
     */
    skipItem(name: string): void;
    /**
     * Unmark a composite bag item as skipped, which means the ResolveEntities or CommonResponse component
     * will prompt again for a value for the bag item
     * @param {string} name - name of the composite bag item
     */
    unskipItem(name: string): void;
    /**
     * Returns true when item is marked as skipped, returns false otherwise
     * @return {boolean} skip item flag
     * @param {string} name - name of the composite bag item
     */
    isSkippedItem(name: string): boolean;
    /**
     * Returns a list of the candidate bot messages created by the the ResolveEntities or CommonResponse component
     * that will be sent to the user when you use addCandidateMessages() function.
     * @return {object[]} list of candidate messages. Note that these messages are in the format of the conversation
     * message model (CMM), and can be either a text, attachment or card message payload
     */
    getCandidateMessages(): IMessagePayload[];
    /**
     * Add the bot messages created by ResolveEntities or CommomResponse component to the response that will
     * be sent to the user.
     * Note that these messages are in the format of the conversation message model (CMM), and can be either
     * a text, attachment or card message payload
     */
    addCandidateMessages(): void;
    /**
     * Returns the list of messages that will be sent to the user
     * @return list of messages
     */
    getMessages(): IMessagePayload[];
    /**
     * Adds a message to the bot response sent to the user.
     * @param {object} payload - can take a string payload, an object payload or a MessageModel payload.  A string or object
     * payload will be parsed into a MessageModel payload.  If the MessageModel payload has a valid common message format,
     * then reply will use it as messagePayload, else it will use the payload to create a rawConversationMessage
     * (see MessageModel) as messagePayload.
     * @param {boolean} keepProcessing - If set to false (the default), the message will be sent to the user and
     * the ResolveEntities or CommonResponse component will stop any further processing, and wait for user input.
     * If set to true, the component will continue processing, possibly sending more messages to the
     * user before releasing the turn
     */
    addMessage(payload: string | IMessagePayload, keepProcessing?: boolean): void;
    /**
     * Returns the composite bag item definitions that already had a value and have gotten a new value
     * extracted from the last user input.
     * @return {string[]} list of composite bag item names
     */
    getItemsUpdated(): string[];
    /**
     * Returns the composite bag item definitions that have gotten a new value
     * extracted from the last user input while the user was prompted for
     * another bag item.
     * @return {string[]} list of composite bag item names
     */
    getItemsMatchedOutOfOrder(): string[];
    /**
     * Returns the composite bag item definitions that have gotten a new value
     * extracted from the last user input
     * @return {string[]} list of composite bag item names
     */
    getItemsMatched(): string[];
    /**
     * A bag item of type system entity, LOCATION and ATTACHMENT has a JSON Object as value.
     * With this function you can override the default display properties of the JSON
     * Object that should be used to print out a string representation of the value.
     * @param {string} entityName - name of the system entity, or 'ATTACHMENT' or 'LOCATION'
     * @param {string[]} properties - array of property names
     */
    setSystemEntityDisplayProperties(entityName: string, properties: string[]): void;
    /**
     * A bag item of type system entity, LOCATION and ATTACHMENT has a JSON Object as value.
     * With this function you can override the default display function that is applied to the
     * display property values. The function is called with each display property as an argument
     * For example, this is the default display function for DURATION:
     * ((startDate,endDate) => new Date(startDate)+" - "+new Date(endDate))
     * If you want to format the dates differently, you can use a library like moments.js
     * and call this function to override the display function
     * Object that should be used to print out a string representation of the value.
     * @param {string} entityName - name of the system entity, or 'ATTACHMENT' or 'LOCATION'
     * @param {object} displayFunction - the display function applied to the display properties
     */
    setSystemEntityDisplayFunction(entityName: string, displayFunction: (...args: string[]) => string): void;
    /**
     * Returns the display value for a composite bag item. For bag items with a custom entity type
     * or STRING items, the display value is the same as the actual value. For system entities, LOCATION
     * and ATTACHMENT the configured display properties and display function determine the display value
     * @see setSystemEntityDisplayProperties
     * @see setSystemEntityDisplayFunction
     * @return {string} display value of composite bag item
     * @param {string} itemName - name of the composite bag item
     */
    getDisplayValue(itemName: string): string;
    /**
     * Returns the display value for a composite bag item. For bag items with a custom entity type
     * or STRING items, the display value is the same as the actual value. For system entities, LOCATION
     * and ATTACHMENT the configured display properties and display function determine the display value
     * @see setSystemEntityDisplayProperties
     * @see setSystemEntityDisplayFunction
     * @return {string[]} list of display values of composite bag item
     * @param {string} itemNames - you can specify one or more item names as argument. If you do this, only the display
     * values of these items will be returned. If you do not specify an item name, the display values of all
     * items in the bag will be returned.
     */
    getDisplayValues(): string[];
    cancel(): void;
    /**
     * Sets the value of a custom property that is stored in the entity resolution context. A custom property can be
     * used to maintain custom state accross event handler calls while resolving the composite bag entity.
     * If you set the value to null, the custom property will be removed.
     * @param {string} name - name of the custom property
     * @param {object} value - value of the custom property
     */
    setCustomProperty(name: string, value: any): void;
    /**
     * Returns the value of a custom property that is stored in the entity resolution context. A custom property can be
     * used to maintain custom state accross event handler calls while resolving the composite bag entity.
     * @return {object} value of the custom property
     * @param {string} name - name of the custom property
     */
    getCustomProperty(name: string): any;
    /**
     * Configure default display properties for all system entities
     * INTERNAL ONLY - DO NOT USE
     * @private
     */
    private _initSystemEntityDisplayProperties;
    /**
     * Returns display value for a composite bag item raw value using the display properties
     * configured for the system entity
     * INTERNAL ONLY - DO NOT USE - Use getDisplayValue(itemName) instead
     * @return {string} the display value
     * @param {string} entityName - name of the bag item entity type
     * @param {object} rawValue - value of the bag item
     * @private
     */
    private _getDisplayValue;
    /**
     * Clears the cache with information which items should be prompted for a value
     * INTERNAL ONLY - DO NOT USE
     * @private
     */
    _clearShouldPromptCache(): void;
    /**
     * Returns the cache with information which items should be prompted for a value.
     * @return {object} Cache is a JSON object with item names as key and a boolean value as value.
     * INTERNAL ONLY - DO NOT USE
     * @private
     */
    _getShouldPromptCache(): any;
}
